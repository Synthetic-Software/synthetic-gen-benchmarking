from pathlib import Path
import pytest
import tempfile

from helpers.clients import OPENAI_CLIENT

TEST_PATHS_BY_REPO = {
    "seaborn": {
        "path": "tests",
        "label_side": "left",
        "framework": "pytest"
    }
}

SUPPORTED_TEST_FRAMEWORKS = ["pytest"]

def verify_synthetic_test(test_path: Path):
    try:
        # Collect tests without running them
        pytest.main(['--collect-only', str(test_path)])
        return True
    except Exception as e:
        print(f"Test validation failed: {e}")
        return False

def create_synthetic_test(
    repo_name: str,
    test_path: Path
):
    repo_test_config = TEST_PATHS_BY_REPO[repo_name]
    synthetic_test_filename = "test_synthetic.py" if repo_test_config["label_side"] == "left" else "synthetic_test.py"
    synth_test_path = test_path / synthetic_test_filename
    
    # Make sure the synthetic test file was not already generated
    if synth_test_path.exists():
        raise Exception("Synthetic test file already exists in repo.")
    
    # Ensure the test framework is within our supported frameworks
    if repo_test_config["framework"] not in SUPPORTED_TEST_FRAMEWORKS:
        raise Exception(f"Unsupported test framework for repo {repo_name}: {repo_test_config['framework']}")
    
    # Generate synthetic test using OpenAI
    prompt = """Generate a pytest test case that:
    1. Tests a simple numpy array operation
    2. Includes assertions to verify the results
    3. Uses basic pytest features
    4. Includes docstring and comments
    
    The test should be self-contained and not require external data. Generate ONLY the code. Generate nothing else. """

    response = OPENAI_CLIENT.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a Python testing expert."},
            {"role": "user", "content": prompt}
        ]
    )
    
    synthetic_test = response.choices[0].message.content
    # Clean up the response to extract just the code between ```python and ``` markers
    if "```python" in synthetic_test:
        synthetic_test = synthetic_test.split("```python")[1].split("```")[0].strip()
    
    # Validate with pytest before creating a permanent test file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py') as tmp:
        tmp.write(synthetic_test)
        tmp.flush()
        if not verify_synthetic_test(Path(tmp.name)):
            raise Exception("Generated test failed validation")
        
    # Write the generated test to file
    with open(synth_test_path, "w") as f:
        f.write(f"# Synthetic test generated by TaoGod. Not to be used elsewhere. \n \n{synthetic_test}")

    print(f"Created {synth_test_path}")
    return synthetic_test

def find_test_path(repo_name: str):
    repo_path = Path(__file__).parent.parent / "repos" / repo_name
    
    if not repo_path.exists():
        raise FileNotFoundError("Could not find repo directory")

    repo_test_config = TEST_PATHS_BY_REPO[repo_name]

    test_path = repo_path / repo_test_config["path"].lstrip("/")

    if not test_path.exists():
        raise FileNotFoundError(f"Could not find test directory at {test_path}")
    
    return test_path

if __name__ == "__main__":
    repo_name = "seaborn"
    test_path = find_test_path(
        repo_name
    )

    synthetic_test = create_synthetic_test(
        repo_name=repo_name, 
        test_path=test_path
    )

    print("Generated and wrote synthetic test: ")
    print(synthetic_test)

